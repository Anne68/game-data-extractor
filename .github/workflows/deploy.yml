name: 🚀 Deploy to AlwaysData (FIXED)
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      # Validate that all required secrets exist
      - name: Validate secrets
        shell: bash
        run: |
          set -e
          [ -n "${{ secrets.AD_HOST }}" ]    || { echo "❌ AD_HOST missing"; exit 1; }
          [ -n "${{ secrets.AD_USER }}" ]    || { echo "❌ AD_USER missing"; exit 1; }
          [ -n "${{ secrets.AD_SSH_KEY }}" ] || { echo "❌ AD_SSH_KEY missing"; exit 1; }
          echo "✅ All secrets are present"

      # Setup SSH key with proper permissions
      - name: Setup SSH key
        shell: bash
        env:
          SSH_KEY: ${{ secrets.AD_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_deploy
          chmod 600 ~/.ssh/id_deploy
          ssh-keyscan -H ${{ secrets.AD_HOST }} >> ~/.ssh/known_hosts

      # Deploy with rsync to the correct path
      - name: Deploy with rsync
        shell: bash
        run: |
          echo "🚀 Starting deployment to ~/game-extraction..."
          rsync -avz --delete --progress \
            --exclude '.git/' \
            --exclude '.github/' \
            --exclude 'node_modules/' \
            --exclude '*.log' \
            --exclude '__pycache__/' \
            -e "ssh -i ~/.ssh/id_deploy -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.AD_USER }}@${{ secrets.AD_HOST }}:~/game-extraction/
          echo "✅ Deployment completed"

      # Setup environment on AlwaysData
      - name: Setup AlwaysData environment
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AD_HOST }}
          username: ${{ secrets.AD_USER }}
          key: ${{ secrets.AD_SSH_KEY }}
          script: |
            cd ~/game-extraction
            
            echo "🔧 Setting up environment..."
            
            # Install Python dependencies
            python3 -m pip install --user -r requirements.txt
            
            # Create necessary directories
            mkdir -p logs data config
            
            # Set executable permissions on scripts
            chmod +x scripts/*.py
            
            # Copy example config if needed
            if [ ! -f config/config.json ] && [ -f config/config.example.json ]; then
              cp config/config.example.json config/config.json
              echo "📋 Config example copied"
            fi
            
            # Test the installation
            echo "🧪 Testing installation..."
            python3 scripts/run_extraction.py --help
            
            echo "✅ Environment setup completed"

      # Verify deployment
      - name: Verify deployment
        shell: bash
        run: |
          echo "🔍 Verifying deployment..."
          ssh -i ~/.ssh/id_deploy -o StrictHostKeyChecking=no \
            ${{ secrets.AD_USER }}@${{ secrets.AD_HOST }} \
            "echo '📂 Project structure:'; \
             ls -la ~/game-extraction/; \
             echo; \
             echo '🐍 Scripts directory:'; \
             ls -la ~/game-extraction/scripts/; \
             echo; \
             echo '⚙️ Config directory:'; \
             ls -la ~/game-extraction/config/ 2>/dev/null || echo 'Config dir not found'"

      # Cleanup
      - name: Cleanup
        shell: bash
        run: |
          rm -f ~/.ssh/id_deploy
          echo "🧹 SSH key cleaned up"
