name: üîç SSH Debug to AlwaysData

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  ssh-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ‚úÖ Validate secrets (fail fast, show lengths)
        shell: bash
        run: |
          set -e
          check() { [ -n "$1" ] || { echo "‚ùå $2 is EMPTY"; exit 1; }; }
          check '${{ secrets.AD_HOST }}'     AD_HOST
          check '${{ secrets.AD_USER }}'     AD_USER
          check '${{ secrets.AD_PATH }}'     AD_PATH
          check '${{ secrets.AD_SSH_KEY }}'  AD_SSH_KEY
          echo "‚úÖ AD_HOST: '${{ secrets.AD_HOST }}'"
          echo "‚úÖ AD_USER: '${{ secrets.AD_USER }}'"
          echo "‚úÖ AD_PATH: '${{ secrets.AD_PATH }}'"
          # Affiche seulement la taille de la cl√© (pas le contenu)
          python - <<'PY'
import os, sys
key=os.getenv('AD_SSH_KEY')
print(f"‚úÖ AD_SSH_KEY length: {len(key) if key else 0} chars")
PY

      - name: üîë Write SSH private key file (600)
        shell: bash
        run: |
          set -e
          umask 077
          cat > id_deploy <<'EOF'
${{ secrets.AD_SSH_KEY }}
EOF
          ls -l id_deploy
          head -n 1 id_deploy || true
          tail -n 1 id_deploy || true

      - name: üß™ SSH -vvv connectivity (capture raw log)
        shell: bash
        run: |
          set -x
          mkdir -p logs
          ssh -vvv -o StrictHostKeyChecking=no \
              -i id_deploy ${{ secrets.AD_USER }}@${{ secrets.AD_HOST }} \
              'echo "CONNECTED OK user=$(whoami) host=$(hostname)"; mkdir -p "'"${{ secrets.AD_PATH }}"'"; echo "From GitHub $(date -u)" > "'"${{ secrets.AD_PATH }}"'/_from_github.txt"' \
              2> logs/ssh_verbose.log
          echo "‚úÖ SSH command exit code: $?"

      - name: üì§ Upload SSH verbose log
        uses: actions/upload-artifact@v4
        with:
          name: ssh_verbose
          path: logs/ssh_verbose.log
