name: üß† Mise √† jour quotidienne TF-IDF (3h du matin)
on:
  schedule:
    - cron: '0 1 * * *'   # 3h du matin Paris
  workflow_dispatch:
    inputs:
      similarity_threshold:
        description: "Seuil de similarit√© TF-IDF (0.3-0.9)"
        required: false
        default: '0.6'
        type: string

jobs:
  daily_tfidf_update:
    runs-on: ubuntu-latest
    
    steps:
    - name: üß† Mise √† jour TF-IDF des prix
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AD_HOST }}
        username: ${{ secrets.AD_USER }}
        key: ${{ secrets.AD_SSH_KEY }}
        script: |
          cd ~/game-extraction
          
          # Variables d'environnement
          export DB_HOST="${{ secrets.DB_HOST }}"
          export DB_USER="${{ secrets.DB_USER }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export DB_NAME="${{ secrets.DB_NAME }}"
          export RAWG_API_KEY="${{ secrets.RAWG_API_KEY }}"
          export DISCORD_WEBHOOK="${{ secrets.DISCORD_WEBHOOK }}"
          export LOG_LEVEL="INFO"
          export HEADLESS_MODE="true"
          export SCRAPING_ENABLED="true"
          
          SIMILARITY_THRESHOLD="${{ github.event.inputs.similarity_threshold }}"
          if [ -z "$SIMILARITY_THRESHOLD" ]; then
            SIMILARITY_THRESHOLD="0.6"
          fi
          
          echo "üß† Mise √† jour quotidienne TF-IDF (seuil: $SIMILARITY_THRESHOLD)"
          
          # Installer scikit-learn si n√©cessaire
          python3 -m pip install --user scikit-learn>=1.3.0
          
          # Mettre √† jour la structure de base si le script existe
          if [ -f scripts/upgrade_database_similarity.py ]; then
            python3 scripts/upgrade_database_similarity.py
          else
            echo "‚ö†Ô∏è Script de mise √† jour de base non trouv√©, continuation..."
          fi
          
          # Notification de d√©but avec TF-IDF
          python3 -c "
          import requests
          import sys
          from datetime import datetime
          
          webhook_url = '${{ secrets.DISCORD_WEBHOOK }}'
          
          if webhook_url:
              try:
                  payload = {
                      'embeds': [{
                          'title': 'üß† Mise √† jour TF-IDF - D√âBUT',
                          'description': f'Lancement de la mise √† jour avec matching intelligent TF-IDF\n\n**Seuil de similarit√©:** $SIMILARITY_THRESHOLD\n**Mode:** Recherche de correspondances pr√©cises',
                          'color': 9936031,
                          'timestamp': datetime.now().isoformat(),
                          'footer': {'text': 'Game Data Extractor ‚Ä¢ TF-IDF Enhanced'}
                      }]
                  }
                  
                  response = requests.post(webhook_url, json=payload, timeout=10)
                  response.raise_for_status()
                  print('‚úÖ Notification Discord envoy√©e')
              except Exception as e:
                  print(f'‚ö†Ô∏è Erreur notification Discord: {e}')
          else:
              print('‚ö†Ô∏è Webhook Discord non configur√©')
          "
          
          # Lancer le pipeline TF-IDF
          if [ -f scripts/run_complete_pipeline_tfidf.py ]; then
            python3 scripts/run_complete_pipeline_tfidf.py
          else
            echo "‚ùå Script TF-IDF non trouv√©!"
            exit 1
          fi
          
          # Statistiques finales TF-IDF
          python3 -c "
          import mysql.connector
          import requests
          import sys
          from datetime import datetime
          
          try:
              conn = mysql.connector.connect(
                  host='${{ secrets.DB_HOST }}',
                  user='${{ secrets.DB_USER }}', 
                  password='${{ secrets.DB_PASSWORD }}',
                  database='${{ secrets.DB_NAME }}'
              )
              cursor = conn.cursor()
              
              # Stats g√©n√©rales
              cursor.execute('SELECT COUNT(*) FROM games')
              total_games = cursor.fetchone()[0]
              
              cursor.execute('SELECT COUNT(*) FROM best_price_pc')
              total_prices = cursor.fetchone()[0]
              
              # Stats TF-IDF si disponibles
              cursor.execute('SHOW COLUMNS FROM best_price_pc LIKE \"similarity_score\"')
              has_similarity = cursor.fetchone() is not None
              
              if has_similarity:
                  cursor.execute('''
                      SELECT 
                          AVG(similarity_score) as avg_sim,
                          COUNT(CASE WHEN similarity_score >= 0.8 THEN 1 END) as high_quality,
                          COUNT(CASE WHEN similarity_score >= 0.6 AND similarity_score < 0.8 THEN 1 END) as medium_quality,
                          COUNT(CASE WHEN similarity_score < 0.6 THEN 1 END) as low_quality
                      FROM best_price_pc 
                      WHERE similarity_score IS NOT NULL
                  ''')
                  
                  sim_stats = cursor.fetchone()
                  avg_sim = float(sim_stats[0]) if sim_stats[0] else 0
                  high_qual = sim_stats[1]
                  med_qual = sim_stats[2] 
                  low_qual = sim_stats[3]
                  
                  quality_desc = f'''üìä **Statistiques de qualit√© TF-IDF:**
- Similarit√© moyenne: **{avg_sim:.3f}**
- Haute qualit√© (‚â•0.8): **{high_qual}** prix
- Qualit√© moyenne (0.6-0.8): **{med_qual}** prix  
- Faible qualit√© (<0.6): **{low_qual}** prix

üéØ **Performance globale:**
- Total jeux: **{total_games:,}**
- Total prix: **{total_prices:,}**
- Couverture: **{(total_prices/total_games*100 if total_games > 0 else 0):.1f}%**'''
              else:
                  avg_sim = 0
                  quality_desc = f'üìä Total: {total_games:,} jeux, {total_prices:,} prix'
              
              # Notification finale
              webhook_url = '${{ secrets.DISCORD_WEBHOOK }}'
              
              if webhook_url:
                  try:
                      color = 3066993 if has_similarity and avg_sim >= 0.7 else 15844367
                      
                      payload = {
                          'embeds': [{
                              'title': '‚úÖ Mise √† jour TF-IDF - TERMIN√âE',
                              'description': quality_desc,
                              'color': color,
                              'timestamp': datetime.now().isoformat(),
                              'footer': {'text': 'Game Data Extractor ‚Ä¢ TF-IDF Enhanced'}
                          }]
                      }
                      
                      response = requests.post(webhook_url, json=payload, timeout=10)
                      response.raise_for_status()
                      print('‚úÖ Notification finale envoy√©e')
                  except Exception as e:
                      print(f'‚ö†Ô∏è Erreur notification finale: {e}')
              
              conn.close()
              print('‚úÖ Pipeline TF-IDF termin√© avec succ√®s')
              
          except mysql.connector.Error as e:
              print(f'‚ùå Erreur MySQL: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'‚ùå Erreur g√©n√©rale: {e}')
              sys.exit(1)
          "
