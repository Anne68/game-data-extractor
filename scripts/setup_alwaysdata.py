#!/usr/bin/env python3
"""
üöÄ Script de setup automatique pour AlwaysData
Configure l'environnement, la base de donn√©es et les d√©pendances
"""

import os
import sys
import subprocess
import argparse
import json
from pathlib import Path

def run_command(cmd, check=True):
    """Ex√©cute une commande syst√®me"""
    print(f"üîß Ex√©cution: {cmd}")
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    if check and result.returncode != 0:
        print(f"‚ùå Erreur: {result.stderr}")
        sys.exit(1)
    return result

def setup_environment():
    """Configure l'environnement Python"""
    print("üêç Configuration de l'environnement Python...")
    
    # Installer les d√©pendances
    run_command("python3 -m pip install --user --upgrade pip")
    run_command("python3 -m pip install --user -r requirements.txt")
    
    # Cr√©er les r√©pertoires n√©cessaires
    os.makedirs("logs", exist_ok=True)
    os.makedirs("data", exist_ok=True)
    os.makedirs("config", exist_ok=True)
    
    print("‚úÖ Environnement configur√©")

def setup_database():
    """Configure la base de donn√©es"""
    print("üóÑÔ∏è Configuration de la base de donn√©es...")
    
    try:
        import mysql.connector
        from src.extractor.database import DatabaseManager
        
        db = DatabaseManager()
        db.setup_tables()
        print("‚úÖ Base de donn√©es configur√©e")
    except Exception as e:
        print(f"‚ùå Erreur de configuration DB: {e}")
        return False
    return True

def setup_cron():
    """Configure les t√¢ches cron"""
    print("‚è∞ Configuration des t√¢ches cron...")
    
    cron_jobs = [
        "0 6 * * * cd ~/game-extraction && python3 scripts/run_extraction.py --games-only",
        "0 18 * * * cd ~/game-extraction && python3 scripts/run_extraction.py --games-only", 
        "0 12 * * * cd ~/game-extraction && python3 scripts/run_extraction.py --prices-only",
        "0 2 * * 0 cd ~/game-extraction && python3 scripts/run_extraction.py --maintenance"
    ]
    
    # √âcrire le fichier crontab
    with open("/tmp/game_extraction_cron", "w") as f:
        for job in cron_jobs:
            f.write(f"{job}\n")
    
    run_command("crontab /tmp/game_extraction_cron")
    run_command("rm /tmp/game_extraction_cron")
    
    print("‚úÖ T√¢ches cron configur√©es")

def main():
    parser = argparse.ArgumentParser(description="Setup AlwaysData environment")
    parser.add_argument("--auto-deploy", action="store_true", 
                       help="D√©ploiement automatique complet")
    parser.add_argument("--skip-cron", action="store_true",
                       help="Ignorer la configuration cron")
    
    args = parser.parse_args()
    
    print("üöÄ D√©but du setup AlwaysData...")
    
    # Setup √©tape par √©tape
    setup_environment()
    
    if setup_database():
        print("‚úÖ Base de donn√©es OK")
    else:
        print("‚ö†Ô∏è Probl√®me avec la base de donn√©es")
    
    if not args.skip_cron:
        setup_cron()
    
    print("üéâ Setup termin√© avec succ√®s !")

if __name__ == "__main__":
    main()
