#!/usr/bin/env python3
"""
üéÆ Script principal d'extraction de donn√©es
G√®re l'extraction des jeux et des prix selon les options sp√©cifi√©es
"""

import os
import sys
import argparse
import logging
import time
from datetime import datetime
from pathlib import Path

# Ajouter le r√©pertoire src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

def setup_logging(level="INFO"):
    """Configure le syst√®me de logging"""
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    logging.basicConfig(
        level=getattr(logging, level),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_dir / "extraction.log"),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

def run_games_extraction(logger, limit=500):
    """Ex√©cute l'extraction des jeux"""
    logger.info(f"üéÆ D√©but extraction des jeux (limite: {limit})")
    
    try:
        from extractor.rawg_extractor import RawgExtractor
        from extractor.database import DatabaseManager
        
        extractor = RawgExtractor()
        db = DatabaseManager()
        
        # Extraction des jeux
        games_data = extractor.fetch_games(limit=limit)
        
        if not games_data.empty:
            db.save_games(games_data)
            logger.info(f"‚úÖ {len(games_data)} jeux extraits et sauvegard√©s")
            return True
        else:
            logger.warning("‚ö†Ô∏è Aucun nouveau jeu √† extraire")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur extraction jeux: {e}")
        return False

def run_prices_scraping(logger, limit=50):
    """Ex√©cute le scraping des prix"""
    logger.info(f"üí∞ D√©but scraping des prix (limite: {limit})")
    
    try:
        from extractor.price_scraper import PriceScraper
        from extractor.database import DatabaseManager
        
        scraper = PriceScraper()
        db = DatabaseManager()
        
        # R√©cup√©rer les jeux √† analyser
        games_to_scrape = db.get_games_for_price_update(limit=limit)
        
        if games_to_scrape.empty:
            logger.info("‚ÑπÔ∏è Aucun jeu √† analyser pour les prix")
            return True
        
        # Scraping des prix
        prices_data = scraper.scrape_prices(games_to_scrape)
        
        if not prices_data.empty:
            db.save_prices(prices_data)
            logger.info(f"‚úÖ {len(prices_data)} prix mis √† jour")
            return True
        else:
            logger.warning("‚ö†Ô∏è Aucun prix r√©cup√©r√©")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur scraping prix: {e}")
        return False

def run_maintenance(logger):
    """Ex√©cute les t√¢ches de maintenance"""
    logger.info("üßπ D√©but de la maintenance")
    
    try:
        from extractor.database import DatabaseManager
        from utils.maintenance import MaintenanceManager
        
        db = DatabaseManager()
        maintenance = MaintenanceManager()
        
        # Nettoyage des logs anciens
        maintenance.cleanup_old_logs(days=7)
        
        # Nettoyage des donn√©es obsol√®tes
        maintenance.cleanup_old_data(days=30)
        
        # Optimisation de la base de donn√©es
        db.optimize_database()
        
        # Statistiques
        stats = db.get_stats()
        logger.info(f"üìä Statistiques: {stats['total_games']} jeux, {stats['total_prices']} prix")
        
        logger.info("‚úÖ Maintenance termin√©e")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur maintenance: {e}")
        return False

def send_notification(logger, message, success=True):
    """Envoie une notification"""
    try:
        from utils.notifications import NotificationManager
        
        notifier = NotificationManager()
        notifier.send_notification(
            message=message,
            level="info" if success else "error"
        )
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur notification: {e}")

def main():
    parser = argparse.ArgumentParser(description="Game Data Extraction Runner")
    parser.add_argument("--games-only", action="store_true", 
                       help="Extraire uniquement les jeux")
    parser.add_argument("--prices-only", action="store_true",
                       help="Scraper uniquement les prix")
    parser.add_argument("--maintenance", action="store_true",
                       help="Ex√©cuter la maintenance")
    parser.add_argument("--full", action="store_true",
                       help="Extraction compl√®te (jeux + prix)")
    parser.add_argument("--test", action="store_true",
                       help="Mode test avec limites r√©duites")
    parser.add_argument("--status", action="store_true",
                       help="Afficher le statut du syst√®me")
    parser.add_argument("--limit", type=int, default=500,
                       help="Limite du nombre d'√©l√©ments √† traiter")
    parser.add_argument("--log-level", default="INFO",
                       choices=["DEBUG", "INFO", "WARNING", "ERROR"],
                       help="Niveau de logging")
    
    args = parser.parse_args()
    
    # Configuration du logging
    logger = setup_logging(args.log_level)
    
    # Mode test : limites r√©duites
    if args.test:
        args.limit = min(args.limit, 10)
        logger.info("üß™ Mode test activ√© (limites r√©duites)")
    
    # D√©but de l'ex√©cution
    start_time = time.time()
    logger.info("üöÄ D√©but de l'ex√©cution du script d'extraction")
    
    success = True
    operations = []
    
    try:
        # Affichage du statut
        if args.status:
            from extractor.database import DatabaseManager
            db = DatabaseManager()
            stats = db.get_detailed_stats()
            
            print("üìä === STATUT DU SYST√àME ===")
            print(f"üéÆ Total jeux: {stats.get('total_games', 0):,}")
            print(f"üí∞ Total prix: {stats.get('total_prices', 0):,}")
            print(f"üìÖ Derni√®re extraction: {stats.get('last_extraction', 'N/A')}")
            print(f"üíæ Taille DB: {stats.get('db_size_mb', 0):.1f} MB")
            print(f"üìÅ Logs: {stats.get('log_files', 0)} fichiers")
            return
        
        # Extraction des jeux
        if args.games_only or args.full:
            if run_games_extraction(logger, args.limit):
                operations.append("‚úÖ Extraction jeux")
            else:
                operations.append("‚ùå Extraction jeux")
                success = False
        
        # Scraping des prix
        if args.prices_only or args.full:
            if run_prices_scraping(logger, args.limit):
                operations.append("‚úÖ Scraping prix")
            else:
                operations.append("‚ùå Scraping prix")
                success = False
        
        # Maintenance
        if args.maintenance:
            if run_maintenance(logger):
                operations.append("‚úÖ Maintenance")
            else:
                operations.append("‚ùå Maintenance")
                success = False
        
        # Si aucune option sp√©cifi√©e, faire extraction jeux par d√©faut
        if not any([args.games_only, args.prices_only, args.maintenance, args.full]):
            logger.info("‚ÑπÔ∏è Aucune option sp√©cifi√©e, extraction des jeux par d√©faut")
            if run_games_extraction(logger, args.limit):
                operations.append("‚úÖ Extraction jeux (d√©faut)")
            else:
                operations.append("‚ùå Extraction jeux (d√©faut)")
                success = False
        
        # Calcul du temps d'ex√©cution
        execution_time = time.time() - start_time
        
        # Message final
        status_msg = "succ√®s" if success else "erreur"
        message = f"üéØ Extraction termin√©e avec {status_msg} en {execution_time:.1f}s"
        
        if operations:
            message += f"\nüìã Op√©rations: {', '.join(operations)}"
        
        logger.info(message)
        
        # Notification
        send_notification(logger, message, success)
        
        # Code de sortie
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Interruption par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
        send_notification(logger, f"‚ùå Erreur fatale: {e}", False)
        sys.exit(1)

if __name__ == "__main__":
    main()
